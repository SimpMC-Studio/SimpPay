import org.glavo.rcon.Rcon

plugins {
    id 'java'
    id 'com.gradleup.shadow'
}
version = getRootProject().version
dependencies {
    // Include the common module
    implementation project(':simppay-api')
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    compileOnly 'com.h2database:h2:2.3.232'
    compileOnly "io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT"
    compileOnly 'com.j256.ormlite:ormlite-jdbc:6.1'

    compileOnly 'org.black_ixx:playerpoints:3.3.0'

    compileOnly('me.clip:placeholderapi:2.11.6') {
        exclude group: 'me.clip.placeholderapi', module: 'libs'
    }
    compileOnly('org.geysermc.floodgate:api:2.2.4-SNAPSHOT')
    implementation("de.exlll:configlib-paper:4.6.0") {
        exclude group: 'org.yaml', module: 'snakeyaml-engine'
    }
    implementation "dev.jorel:commandapi-bukkit-shade:9.7.0"
    implementation("com.github.technicallycoded:FoliaLib:main-SNAPSHOT")
    implementation('me.devnatan:inventory-framework-platform-bukkit:3.3.8')
    implementation 'me.devnatan:inventory-framework-anvil-input:3.3.8'
    implementation('me.devnatan:inventory-framework-platform-paper:3.3.8')
    implementation("com.github.retrooper:packetevents-spigot:2.8.0")
    implementation('net.wesjd:anvilgui:1.10.5-SNAPSHOT')
}

shadowJar {
    // Configure name & output location
    archiveBaseName.set("SimpPay-Paper")
    archiveVersion.set(version)
    archiveClassifier.set('')
    
    // Improved output directory handling
    if (System.getenv("OUTPUT_DIR") != null) {
        destinationDirectory.set(file(System.getenv("OUTPUT_DIR")))
    } else {
        destinationDirectory.set(file("$projectDir/../build/libs"))
    }
    
    // Optimized relocations with consistent naming
    def relocPrefix = "org.simpmc.simppay.lib"
    relocate("de.exlll.configlib", "${relocPrefix}.configlib")
    relocate("dev.jorel.commandapi", "${relocPrefix}.commandapi")
    relocate("com.tcoded.folialib", "${relocPrefix}.folialib")
    relocate("me.devnatan.inventoryframework", "${relocPrefix}.inventoryframework")
    relocate("org.json.json", "${relocPrefix}.json")
    relocate("io.github.retrooper.packetevents", "${relocPrefix}.packetevents.io")
    relocate("com.github.retrooper.packetevents", "${relocPrefix}.packetevents.com")
    relocate("net.wesjd.anvilgui", "${relocPrefix}.anvilgui")
    relocate("kotlin", "${relocPrefix}.kotlin")
    
    // Minimize jar size
    minimize()
    
    // Exclude unnecessary files
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE*'
    exclude 'META-INF/NOTICE*'
}
tasks.register('sendRconCommand') {
    description = 'Sends "res" command to the Minecraft server via RCON'
    doLast {
        def host = project.findProperty('rcon.host') ?: 'localhost'
        def port = Integer.parseInt(project.findProperty('rcon.port') ?: '25575')
        def password = project.findProperty('rcon.password') ?: System.getenv('RCON_PASSWORD') ?: '123123123'
        def command = project.findProperty('rcon.command') ?: 'res'
        
        // Send the command and capture the response
        Rcon rcon = null
        try {
            rcon = new Rcon(host, port, password)
            String response = rcon.command(command)
            println "RCON Response: $response"

        } catch (SocketException e) {
            // Connection reset is expected when the server stops itself
            println "üîå Connection reset by server (expected if it just stopped). Ignoring."
        } catch (Exception e) {
            // Other RCON or IO errors
            println "‚ùó Unexpected error sending RCON command: ${e.class.simpleName}: ${e.message}"
        } finally {
            if (rcon != null) {
                try {
                    rcon.close()
                } catch (Exception ignored) {
                }
            }
        }
        println "‚è± Waiting 5 seconds..."
        Thread.sleep(5000)
    }
}
processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
tasks.build {
    dependsOn(shadowJar)
}
